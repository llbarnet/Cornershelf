Outline:
This will be an online cookbook app. Users will be able to save recipes to a "cookbook". Each recipe will have a category, description, ingredients, and directions. All users will be able to look through and view other users cookbooks. Users will have the ability to add recipes to their cookbook, delete recipes, edit recipes, and create recipes.
Users will have two options to create their recipes.
1. Enter all recipe categories manually.
2. Search for a recipe using the Yummly API, and then save the recipe to their cookbook using JSON to fill out categories.

**Above and Beyond**
1. allow for a rating system of users cookbooks. Highest rated cookbooks will be on top bar of homescreen.
2. be able to save a recipe from another user into your own cookbook.

cornershelf.py:
Will have 12 pages:
1. /cornershelf
(user cookbooks listed, button for login, create a cookbook, logout)

2. /cornershelf/<int:cookbook_id>
-Not Users Cookbook: view only

3. /cornershelf/<int:cookbook_id>/<int:recipes_id>
-Not Users Cookbook: view only (maybe a save recipe to my own cookbook button?)

4. /cornershelf/username/<int:cookbook_id>
-If user.id = cookbook.user_id (all recipes listed, button for add recipe )

5. /cornershelf/username/<int:cookbook_id>/add
- will have box to fill in new recipe and a button that says search for recipe
-If user.id = cookbook.user_id

6. /cornershelf/username/<int:cookbook_id>/<int:recipes_id>/edit
-If user.id = cookbook.user_id, edit box will look a lot like add input fields but text already populated.

7. /cornershelf/username/<int:cookbook_id>/<int:recipes_id>/delete
-If user.id = cookbook.user_id, will have a "are you sure you want to delete %s recipe" %s recipes.name

8. /cornershelf/search
-Will try to incorporate yummly api and json to add recipes to own cookbook.

9. /cornershelf/createcookbook
-will have to check for login first, then create cookbook input field. Only one cookbook per person will check with user id and cookbook id

10./cornershelf/login
-create own users? and google

11./cornershelf/username/<int:cookbook_id>/<int:recipes_id> -If user.id = cookbook.user_id
-will display recipe and will have edit/delete buttons on page.

12./cornershelf/logout
-will end session token for each user.

database_setup.py:
Table = User
    id = Column(Integer, primary_key=True)
    username = Column(String(250), nullable=False)
    email = Column(String(50), nullable=False)
    cookbook_name = Column(String(150))

Table = Cookbook
    id = Column(Integer, primary_key=True)
    name = Column(String(150), nullable=False, ForeignKey('user.cookbook_name') )
    user_id = Column(Integer, ForeignKey('user.id'))
    user = relationship(User)

Table = Recipes
    id = Column(Integer, primary_key=True)
    name = Column(String(80), nullable = False)
    ingredients = Column(String(300), nullable = False)
    directions = Column(String(800), nullable = False)
    type = Column(String(50))
    cookbook_id = Column(Integer, ForeignKey('cookbook.id'))
    cookbook = relationship(Cookbook)
    user_id = Column(Integer, ForeignKey('user.id'))
    user = relationship(User)



client_secrets.json:
*login info for google
yummly_secrets.JSON:
*api key for yummly


templates:
HTML Templates will need 11. Number corresponds with route.
1: index.html
2: publicCookbook.html
3: publicRecipe.html
4: cookbook.html
5: addRecipe.html
6: editRecipe.html
7: deleteRecipe.html
8: searchRecipe.html
9: createCookbook.html
10: login.html
11: recipe.html


Misc:

Message flashing should be added to each action.
Add home button to all pages?
